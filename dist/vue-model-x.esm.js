import Vue from 'vue';

var vue = new Vue({
  watch: {
    w: function w() {}
  }
});
var Watcher = vue._watchers[0].constructor;
var Observer = vue.$data.__ob__.constructor;
var Dep = vue.$data.__ob__.dep.constructor;
var defineReactive = Vue.util.defineReactive;

var observableValues = Symbol('observableValues');
function observable(proto, name, descriptor) {
  var reactiveDescriptor = {
    configurable: true,
    enumerable: true,
    get: function get() {
      var value;

      if (this.hasOwnProperty(observableValues) && name in this[observableValues]) {
        value = this[observableValues][name];
      } else {
        value = descriptor.initializer();
        saveObservableValue(this, name, value);
      }

      if (Dep.target) {
        defineReactiveProperty(this, name, value, descriptor); // Should call newly created getter in order to set reactive dependency

        return this[name];
      } else {
        return value;
      }
    },
    set: function set(value) {
      if (Dep.target) {
        defineReactiveProperty(this, name, value, descriptor);
      } else {
        if (!this.hasOwnProperty(name)) {
          // Defining reactive descriptor on the object itself in order to `Object.keys` to list it
          Object.defineProperty(this, name, reactiveDescriptor);
        }

        saveObservableValue(this, name, value);
      }
    }
  };
  return reactiveDescriptor;
}

function defineReactiveProperty(obj, name, value, originalPropertyDescriptor) {
  // Defining original property
  Object.assign(originalPropertyDescriptor, {
    configurable: true,
    writable: true,
    value: value
  });
  Object.defineProperty(obj, name, originalPropertyDescriptor); // Converting it to reactive

  defineReactive(obj, name, value);
}

function saveObservableValue(obj, name, value) {
  if (!obj.hasOwnProperty(observableValues)) {
    obj[observableValues] = Object.create(null);
  }

  obj[observableValues][name] = value;
}

var computedWatchers = Symbol('computedWatchers');

var noop = function noop() {};

function computed(prototype, getterName, descriptor) {
  var getter = descriptor.get;

  if (!getter) {
    throw new TypeError(prototype.constructor.name + "#" + getterName + " is not a getter so it can't be used as computed property");
  }

  return {
    configurable: true,
    enumerable: true,
    get: function get() {
      if (!Dep.target) {
        return getter.call(this);
      }

      if (!this.hasOwnProperty(computedWatchers)) {
        // Needed by Vue's `Watcher` constructor
        this._watchers = [];
        this[computedWatchers] = new Map();
      }

      if (!this[computedWatchers].has(prototype)) {
        this[computedWatchers].set(prototype, Object.create(null));
      }

      var watchers = this[computedWatchers].get(prototype);
      var watcher = watchers[getterName];

      if (!watcher) {
        // Lazily creating computed watcher
        watcher = watchers[getterName] = new Watcher(this, getter, noop, {
          lazy: true
        });
      }

      if (watcher.dirty) {
        watcher.evaluate();
      }

      watcher.depend();
      return watcher.value;
    }
  };
}

var VueModel = function VueModel(data) {
  Object.defineProperty(this, '__ob__', {
    enumerable: false,
    value: new Observer({})
  });

  if (data) {
    Object.assign(this, data);
  }
};

export { observable, computed, VueModel };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidnVlLW1vZGVsLXguZXNtLmpzIiwic291cmNlcyI6WyIuLi9zcmMvdnVlLWludGVybmFscy5qcyIsIi4uL3NyYy9vYnNlcnZhYmxlLmpzIiwiLi4vc3JjL2NvbXB1dGVkLmpzIiwiLi4vc3JjL1Z1ZU1vZGVsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBWdWUgZnJvbSAndnVlJztcblxuY29uc3QgdnVlID0gbmV3IFZ1ZSh7XG4gIHdhdGNoOiB7XG4gICAgdygpIHt9XG4gIH1cbn0pO1xuXG5leHBvcnQgY29uc3QgV2F0Y2hlciA9IHZ1ZS5fd2F0Y2hlcnNbMF0uY29uc3RydWN0b3I7XG5leHBvcnQgY29uc3QgT2JzZXJ2ZXIgPSB2dWUuJGRhdGEuX19vYl9fLmNvbnN0cnVjdG9yO1xuZXhwb3J0IGNvbnN0IERlcCA9IHZ1ZS4kZGF0YS5fX29iX18uZGVwLmNvbnN0cnVjdG9yO1xuZXhwb3J0IGNvbnN0IHtkZWZpbmVSZWFjdGl2ZX0gPSBWdWUudXRpbDtcbiIsImltcG9ydCB7RGVwLCBkZWZpbmVSZWFjdGl2ZX0gZnJvbSAnLi92dWUtaW50ZXJuYWxzJztcblxuY29uc3Qgb2JzZXJ2YWJsZVZhbHVlcyA9IFN5bWJvbCgnb2JzZXJ2YWJsZVZhbHVlcycpO1xuXG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2YWJsZShwcm90bywgbmFtZSwgZGVzY3JpcHRvcikge1xuICBjb25zdCByZWFjdGl2ZURlc2NyaXB0b3IgPSB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIGVudW1lcmFibGU6IHRydWUsXG5cbiAgICBnZXQoKSB7XG4gICAgICBsZXQgdmFsdWU7XG5cbiAgICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KG9ic2VydmFibGVWYWx1ZXMpICYmIG5hbWUgaW4gdGhpc1tvYnNlcnZhYmxlVmFsdWVzXSkge1xuICAgICAgICB2YWx1ZSA9IHRoaXNbb2JzZXJ2YWJsZVZhbHVlc11bbmFtZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IGRlc2NyaXB0b3IuaW5pdGlhbGl6ZXIoKTtcbiAgICAgICAgc2F2ZU9ic2VydmFibGVWYWx1ZSh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlZmluZVJlYWN0aXZlUHJvcGVydHkodGhpcywgbmFtZSwgdmFsdWUsIGRlc2NyaXB0b3IpO1xuICAgICAgICAvLyBTaG91bGQgY2FsbCBuZXdseSBjcmVhdGVkIGdldHRlciBpbiBvcmRlciB0byBzZXQgcmVhY3RpdmUgZGVwZW5kZW5jeVxuICAgICAgICByZXR1cm4gdGhpc1tuYW1lXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc2V0KHZhbHVlKSB7XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICBkZWZpbmVSZWFjdGl2ZVByb3BlcnR5KHRoaXMsIG5hbWUsIHZhbHVlLCBkZXNjcmlwdG9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xuICAgICAgICAgIC8vIERlZmluaW5nIHJlYWN0aXZlIGRlc2NyaXB0b3Igb24gdGhlIG9iamVjdCBpdHNlbGYgaW4gb3JkZXIgdG8gYE9iamVjdC5rZXlzYCB0byBsaXN0IGl0XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIG5hbWUsIHJlYWN0aXZlRGVzY3JpcHRvcik7XG4gICAgICAgIH1cbiAgICAgICAgc2F2ZU9ic2VydmFibGVWYWx1ZSh0aGlzLCBuYW1lLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiByZWFjdGl2ZURlc2NyaXB0b3I7XG59XG5cbmZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlUHJvcGVydHkob2JqLCBuYW1lLCB2YWx1ZSwgb3JpZ2luYWxQcm9wZXJ0eURlc2NyaXB0b3IpIHtcbiAgLy8gRGVmaW5pbmcgb3JpZ2luYWwgcHJvcGVydHlcbiAgT2JqZWN0LmFzc2lnbihvcmlnaW5hbFByb3BlcnR5RGVzY3JpcHRvciwge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICB2YWx1ZVxuICB9KTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbmFtZSwgb3JpZ2luYWxQcm9wZXJ0eURlc2NyaXB0b3IpO1xuICAvLyBDb252ZXJ0aW5nIGl0IHRvIHJlYWN0aXZlXG4gIGRlZmluZVJlYWN0aXZlKG9iaiwgbmFtZSwgdmFsdWUpO1xufVxuXG5mdW5jdGlvbiBzYXZlT2JzZXJ2YWJsZVZhbHVlKG9iaiwgbmFtZSwgdmFsdWUpIHtcbiAgaWYgKCFvYmouaGFzT3duUHJvcGVydHkob2JzZXJ2YWJsZVZhbHVlcykpIHtcbiAgICBvYmpbb2JzZXJ2YWJsZVZhbHVlc10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9XG5cbiAgb2JqW29ic2VydmFibGVWYWx1ZXNdW25hbWVdID0gdmFsdWU7XG59XG4iLCJpbXBvcnQge0RlcCwgV2F0Y2hlcn0gZnJvbSAnLi92dWUtaW50ZXJuYWxzJztcblxuY29uc3QgY29tcHV0ZWRXYXRjaGVycyA9IFN5bWJvbCgnY29tcHV0ZWRXYXRjaGVycycpO1xuY29uc3Qgbm9vcCA9ICgpID0+IHt9O1xuXG5leHBvcnQgZnVuY3Rpb24gY29tcHV0ZWQocHJvdG90eXBlLCBnZXR0ZXJOYW1lLCBkZXNjcmlwdG9yKSB7XG4gIGNvbnN0IGdldHRlciA9IGRlc2NyaXB0b3IuZ2V0O1xuXG4gIGlmICghZ2V0dGVyKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIGAke3Byb3RvdHlwZS5jb25zdHJ1Y3Rvci5uYW1lfSMke2dldHRlck5hbWV9IGlzIG5vdCBhIGdldHRlciBzbyBpdCBjYW4ndCBiZSB1c2VkIGFzIGNvbXB1dGVkIHByb3BlcnR5YFxuICAgICk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldCgpIHtcbiAgICAgIGlmICghRGVwLnRhcmdldCkge1xuICAgICAgICByZXR1cm4gZ2V0dGVyLmNhbGwodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eShjb21wdXRlZFdhdGNoZXJzKSkge1xuICAgICAgICAvLyBOZWVkZWQgYnkgVnVlJ3MgYFdhdGNoZXJgIGNvbnN0cnVjdG9yXG4gICAgICAgIHRoaXMuX3dhdGNoZXJzID0gW107XG4gICAgICAgIHRoaXNbY29tcHV0ZWRXYXRjaGVyc10gPSBuZXcgTWFwKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpc1tjb21wdXRlZFdhdGNoZXJzXS5oYXMocHJvdG90eXBlKSkge1xuICAgICAgICB0aGlzW2NvbXB1dGVkV2F0Y2hlcnNdLnNldChwcm90b3R5cGUsIE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB3YXRjaGVycyA9IHRoaXNbY29tcHV0ZWRXYXRjaGVyc10uZ2V0KHByb3RvdHlwZSk7XG4gICAgICBsZXQgd2F0Y2hlciA9IHdhdGNoZXJzW2dldHRlck5hbWVdO1xuXG4gICAgICBpZiAoIXdhdGNoZXIpIHtcbiAgICAgICAgLy8gTGF6aWx5IGNyZWF0aW5nIGNvbXB1dGVkIHdhdGNoZXJcbiAgICAgICAgd2F0Y2hlciA9IHdhdGNoZXJzW2dldHRlck5hbWVdID0gbmV3IFdhdGNoZXIodGhpcywgZ2V0dGVyLCBub29wLCB7bGF6eTogdHJ1ZX0pO1xuICAgICAgfVxuXG4gICAgICBpZiAod2F0Y2hlci5kaXJ0eSkge1xuICAgICAgICB3YXRjaGVyLmV2YWx1YXRlKCk7XG4gICAgICB9XG5cbiAgICAgIHdhdGNoZXIuZGVwZW5kKCk7XG5cbiAgICAgIHJldHVybiB3YXRjaGVyLnZhbHVlO1xuICAgIH1cbiAgfTtcbn1cbiIsImltcG9ydCB7T2JzZXJ2ZXJ9IGZyb20gJy4vdnVlLWludGVybmFscyc7XG5cbmV4cG9ydCBjbGFzcyBWdWVNb2RlbCB7XG5cbiAgY29uc3RydWN0b3IoZGF0YSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX19vYl9fJywge1xuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB2YWx1ZTogbmV3IE9ic2VydmVyKHt9KVxuICAgIH0pO1xuXG4gICAgaWYgKGRhdGEpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgZGF0YSk7XG4gICAgfVxuICB9XG5cbn1cbiJdLCJuYW1lcyI6WyJ2dWUiLCJWdWUiLCJXYXRjaGVyIiwiX3dhdGNoZXJzIiwiY29uc3RydWN0b3IiLCJPYnNlcnZlciIsIiRkYXRhIiwiX19vYl9fIiwiRGVwIiwiZGVwIiwiZGVmaW5lUmVhY3RpdmUiLCJ1dGlsIiwib2JzZXJ2YWJsZVZhbHVlcyIsIlN5bWJvbCIsIm9ic2VydmFibGUiLCJwcm90byIsIm5hbWUiLCJkZXNjcmlwdG9yIiwicmVhY3RpdmVEZXNjcmlwdG9yIiwidmFsdWUiLCJoYXNPd25Qcm9wZXJ0eSIsImluaXRpYWxpemVyIiwidGFyZ2V0IiwiZGVmaW5lUHJvcGVydHkiLCJkZWZpbmVSZWFjdGl2ZVByb3BlcnR5Iiwib2JqIiwib3JpZ2luYWxQcm9wZXJ0eURlc2NyaXB0b3IiLCJhc3NpZ24iLCJzYXZlT2JzZXJ2YWJsZVZhbHVlIiwiT2JqZWN0IiwiY3JlYXRlIiwiY29tcHV0ZWRXYXRjaGVycyIsIm5vb3AiLCJjb21wdXRlZCIsInByb3RvdHlwZSIsImdldHRlck5hbWUiLCJnZXR0ZXIiLCJnZXQiLCJUeXBlRXJyb3IiLCJjYWxsIiwiTWFwIiwiaGFzIiwic2V0Iiwid2F0Y2hlcnMiLCJ3YXRjaGVyIiwiZGlydHkiLCJldmFsdWF0ZSIsImRlcGVuZCIsIlZ1ZU1vZGVsIiwiZGF0YSJdLCJtYXBwaW5ncyI6Ijs7QUFFQSxJQUFNQSxNQUFNLElBQUlDLEdBQUosQ0FBUTtTQUNYO0tBQUEsZUFDRDs7Q0FGSSxDQUFaO0FBTUEsQUFBTyxJQUFNQyxVQUFVRixJQUFJRyxTQUFKLENB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
